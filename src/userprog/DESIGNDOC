             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Milan Misak <mm5510@imperial.ac.uk>
Jack Bracewell <jb2910@doc.ic.ac.uk>
Craig Ellis <ce710@doc.ic.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

When process_execute() is called, with the full string of arguments, two copies
are made, and tokenised (both become corrupted by strtok_r(). The first can't
simply be reset to the full argument string, as it is used to retrieve the file
name from the first token, and a reset would also reset the file name). Next,
start_process() is called, which takes in a copy of the original string of
arguments, and tokenises them again (TODO: why?), and stores them, in order, in the array argv[]. The structures that the thread requires are initialised, and then writing to the program's executable file is restricted.
Finally, the stack is initialised with each argument in the correct order (made
easier with the array of arguments), and all other information that the process
expects to be there, in order to start for the first time. A simulated return
from an interrupt then forces the thread to start.

TODO: Milan, how do we avoid overflowing the stack page?
TODO: Craig, WTF is a stack page? sort it out


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

From the man page of strtok(): "The strtok() function uses a static buffer
while parsing, so it's not thread safe."
This means that there is a single, static buffer which strtok() operates on,
and if multiple threads were to access this buffer at the same time, its value
is likely to be corrupted.


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. The kernel can schedule the tokenising of the arguments as though it were another thread, with priority, etc, in case something else with higher priority wants to do stuff?
2. Kernel... has to do less? Like, the memory that the kernel needs is less? Iunnolol. :D

TODO: see if my wild guesses are right, and write this all nicely and everything :)


                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:
    struct list children;               /* List of the process' children */

    struct list open_files;             /* List of files opened by this
                                           process. */

    struct file *executable_file;       /* Program (executable) file of
                                           this process. */
 
New structs: (TODO: add comments)

struct child
  {
    struct list_elem elem;
    tid_t tid;
    int exitStatus;
    struct semaphore wait;

    struct semaphore loading_sema;      /* Semaphore to announce the end of
                                           process loading (both successful or
                                           one which ends with an error). */

    bool loaded_correctly;              /* True, if process was loaded
                                           correctly. False otherwise. */
    struct semaphore free_sema;         /* Semaphore to allow freeing of the
                                           struct */
  };

struct open_file
  {
    int fd;                             /* File descriptor. */
    struct file *file;                  /* Pointer to the file struct. */
    struct list_elem elem;              /* List element. */
  };


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a file is opened by calling the open system call it gets added to
current process's list of open files and assigned a unique file descriptor.
So, file descriptors are unique within a single process only. Also, when a file
gets closed its file descriptor is freed and it can be reused by the system
later for another file.

If the same file is opened and kept open repeatedly, each time time it gets
a new file descriptor.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

TODO: Jack or Milan

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

TODO: Jack or Milan

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

TODO: Jack (I think)

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

TODO: Jack (I think)

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Every thread structure has a semaphore called 'loading_sema' associated
with it (actually it is in another struct inside each thread).

When process_execute finishes and returns a new process's ID to a call
to exec the parent thread finds the newly created process in the list
of its children based on this PID. Then it downs new process's semaphore
which ensures proper synchronization with the code responsible for loading
a process.

In either case when a process loads correctly or fails when trying to load
its loading_sema is 'upped' so the parent process knows that loading finished.
Before the semaphore is upped a boolean flag is set to indicate success or
failure of loading making it easy for the parent process to find out the
result.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

TODO: Jack

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

TODO: Jack (I think)

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

TODO: Jack (I think)

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

TODO: Jack or Milan

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?
