             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Milan Misak <mm5510@imperial.ac.uk>
Jack Bracewell <jb2910@doc.ic.ac.uk>
Craig Ellis <ce710@doc.ic.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

When process_execute() is called, with the full string of arguments, two copies
are made, and tokenised (both become corrupted by strtok_r(). The first can't
simply be reset to the full argument string, as it is used to retrieve the file
name from the first token, and a reset would also reset the file name). Next,
start_process() is called, which takes in a copy of the original string of
arguments, and tokenises them again (TODO: why?), and stores them, in order, in the array argv[]. The structures that the thread requires are initialised, and then writing to the program's executable file is restricted.
Finally, the stack is initialised with each argument in the correct order (made
easier with the array of arguments), and all other information that the process
expects to be there, in order to start for the first time. A simulated return
from an interrupt then forces the thread to start.

If the stack page is overflowed, this is detected as a page fault because
magic will become corrupted. When a page fault occurs, the thread is killed.

TODO: Milan, how do we avoid overflowing the stack page?
TODO: Craig, WTF is a stack page? sort it out
TODO: Jack, Jack is the king


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

From the man page of strtok(): "The strtok() function uses a static buffer
while parsing, so it's not thread safe."
This means that there is a single, static buffer which strtok() operates on,
and if multiple threads were to access this buffer at the same time, its value
is likely to be corrupted.


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. The kernel can schedule the tokenising of the arguments as though it were another thread, with priority, etc, in case something else with higher priority wants to do stuff?
2. Kernel... has to do less? Like, the memory that the kernel needs is less? Iunnolol. :D

TODO: see if my wild guesses are right, and write this all nicely and everything :)


                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:

    bool orphan;                        /* Indicates whether the process'
                                           parent is dead */
    struct list children;               /* List of the process' children */
    struct list open_files;             /* List of open files by this process. */


New structs:

struct child
  {
    struct list_elem elem;
    tid_t tid;
    int exitStatus;
    struct semaphore wait;
  };

struct open_file
  {
    int fd;                             /* File descriptor. */
    struct file *file;                  /* Pointer to the file struct. */
    struct list_elem elem;              /* List element. */
  };


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

TODO: Jack or Milan

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

TODO: Jack or Milan

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

TODO: Jack or Milan

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When a process creates a child, it mallocs a child struct and passes
it into the thread. Both process's will contain a pointer to this struct,
each thread has a unique pointer to its own child struct (if it is not the
initial thread), and a list of its children.

When process wait is called, it loops through the list of the process'
children list to check if any of the structs have a matching tid. If
this is the case, a semaphore in the child struct is downed in order to 
wait for the thread to finish (this is upped when the child thread stops
running). This semaphore is immediately upped in process_wait so no waiting
occurs in the future if the parent tries to wait on this thread again.

The child's exit status is then stored temporarily as the return value, and
the exit status is set to -1 for future calls. Process_wait then returns 
to the exit system call.

When a process terminates it needs to up the semaphore that is causing its
parent thread to block waiting (potentially). But also it needs to attempt
to free its list of children, it can only do this if each child has exited
which is controlled by semaphores. The child struct will either be freed
when the parent terminates, or when the child finishes waiting, which can
happen in either order so is controlled using a semaphore.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

TODO: Milan

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

TODO: Jack or Milan

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

As described briefly previously, each process has a child struct which
contains 2 semaphores. When P calls wait(C) before C exits, the wait 
semaphore inside the child struct is downed (it is initialized to 0).
When C exits then the wait semaphore is upped, you can also see how
this will work if wait(C) is called after C exits.

In each case, the free_sema will try to be downed (either in process_wait 
or in thread_exit), it is initialized to 1, but downed inside process_wait
to signal that P is waiting, this allows P to free the struct if it never
waits on C. If the sema cannot be downed then the sema is upped as a signal 
to the other case that will occur that it is safe to free the struct.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We implemented the safe access to user memory the way we did because
it is faster to signal a bad pointer via a page fault than checking if the
pointer is NULL because it utilizes the MMU. Of course it is not faster
if the pointer is actually bad because the page fault interrupt will slow
down the computer a lot more. But it leads to better performance in general
because this check does not need to be performed all the time, and if the
pointer does cause a page fault then the thread will have to exit anyway so
it does not matter if it is slower in this case.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

TODO: Milan

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change this mapping. The advantages in our approach are that
it is faster because no calculations are needed to map one value to the
other. As a result of this, it also cuts down on code size.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?
